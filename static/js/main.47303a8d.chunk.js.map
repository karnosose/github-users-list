{"version":3,"sources":["User/User.js","User/User.style.js","UsersList/UsersList.js","UsersList/UsersList.style.js","serviceWorker.js","index.js"],"names":["User","handleDeleteClick","_this$props","this","props","login","avatar","githubUrl","classes","react_default","a","createElement","Grid","item","xs","sm","Card","className","card","CardActionArea","CardMedia","component","alt","image","CardContent","Typography","gutterBottom","variant","Link","class","href","target","color","rel","CardActions","actions","Tooltip","title","Edit_default","editUser","onClick","handleEditClick","Delete_default","deleteUser","Component","withStyles","theme","width","textAlign","margin","marginTop","borderRadius","display","background","fontWeight","textDecoration","padding","boxShadow","&:hover","marginBottom","justifyContent","UsersList","state","isLoading","isEmpty","errorMessage","users","fetchGithubUsersList","fetch","then","res","status","Error","json","_this","setState","length","catch","err","message","console","log","_this$state","Container","maxWidth","pageTitle","container","spacing","map","user","id","src_User_User","key","uuid","avatar_url","html_url","Boolean","window","location","hostname","match","ReactDOM","render","src_UsersList_UsersList","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.47303a8d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\n\r\n\r\nimport {styles} from './User.style';\r\nimport { withStyles } from '@material-ui/styles';\r\n\r\n\r\nclass User extends Component {\r\n\r\n  handleDeleteClick = () => {\r\n    \r\n  }\r\n\r\n  render() {\r\n    const {login, avatar, githubUrl, classes} = this.props;\r\n\r\n    return (\r\n      <Grid item xs={6} sm={3}>\r\n        <Card className={classes.card}>\r\n        <CardActionArea>\r\n          <CardMedia\r\n            className={classes.avatar}\r\n            component=\"img\"\r\n            alt=\"avatar\"\r\n            image={avatar}\r\n          />\r\n          <CardContent>\r\n            <Typography \r\n              gutterBottom\r\n              variant=\"h5\" \r\n              component=\"h2\"\r\n              className={classes.login}\r\n            >\r\n              {login}\r\n            </Typography>\r\n            <Link \r\n              class={classes.githubUrl}\r\n              href={githubUrl} \r\n              target='_blank' \r\n              color=\"inherit\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              View github account\r\n            </Link>\r\n          </CardContent>\r\n          <CardActions className={classes.actions}>\r\n            <Tooltip title=\"Edit user\">\r\n              <EditIcon \r\n                className={classes.editUser} \r\n                onClick={this.handleEditClick}\r\n              />\r\n            </Tooltip>\r\n            <Tooltip title=\"Delete user\">\r\n              <DeleteIcon \r\n                className={classes.deleteUser} \r\n                onClick={this.handleDeleteClick}\r\n              />\r\n            </Tooltip>\r\n          </CardActions>\r\n        </CardActionArea>\r\n        \r\n      </Card>\r\n    </Grid>\r\n    )\r\n  }\r\n}\r\n\r\nUser.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n  login: PropTypes.string.isRequired,\r\n  avatar: PropTypes.string.isRequired,\r\n  githubUrl: PropTypes.string.isRequired,\r\n\r\n};\r\n\r\n\r\nexport default withStyles(styles)(User);\r\n","export const styles = theme => ({\r\n  avatar: {\r\n    width: '80%',\r\n    textAlign: 'center',\r\n    margin: 'auto',\r\n    marginTop: 20,\r\n    borderRadius: '50%'\r\n  },\r\n  card: {\r\n    width: '100%',\r\n    margin:10,\r\n    display: 'inline-block',\r\n    textAlign:'center',\r\n    background: '#F6F6F6',\r\n  },\r\n  githubUrl: {\r\n    background: '#2b8093',\r\n    color: '#eef3fcf5',\r\n    fontWeight: 500,\r\n    textDecoration: 'none',\r\n    padding:10,\r\n    borderRadius: 4 ,\r\n    boxShadow: '0px 2px 1px -1px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 1px 3px 0px rgba(0,0,0,0.12)',\r\n    '&:hover': {\r\n        textDecoration: 'none',\r\n        background: '#275c68'\r\n    }\r\n  },\r\n  login: {\r\n    marginBottom: '1em'\r\n  },\r\n  actions: {\r\n    justifyContent: 'center',\r\n  },\r\n  deleteUser: {\r\n    color: '#e51717',\r\n  },\r\n  editUser: {\r\n    color: '#673AB7',\r\n  }\r\n})\r\n    \r\n  ","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport uuid from 'react-uuid';\n\nimport Grid from '@material-ui/core/Grid';\nimport Container from '@material-ui/core/Container'\n\nimport User from '../User/User'\n\nimport {styles} from './UsersList.style';\nimport { withStyles } from '@material-ui/styles';\nimport { Typography } from '@material-ui/core';\n\n\nclass UsersList extends Component {\n\n  state = {\n    isLoading: true,\n    isEmpty: false,\n    errorMessage: '',\n    users: []\n  }\n\n  componentDidMount() {\n    this.fetchGithubUsersList();\n  }\n\n  fetchGithubUsersList = () => {\n    fetch('https://api.github.com/users')\n    .then(res => {\n      if (res.status === 404) {\n        throw new Error(\"No Data\");\n      }\n      return res;\n    })\n    .then(users => users.json())\n    .then(users => {\n      this.setState({\n        users: users,\n        isEmpty: users.length === 0,\n        isLoading: false,\n        errorMessage: '',\n      })\n    })\n    .catch(err =>\n      this.setState({\n        isLoading: false,\n        errorMessage: err.message,\n        users: []\n      })\n    );\n  }\n\n\n  render() {\n    console.log(this.state)\n\n    const {isEmpty, isLoading, errorMessage, users} = this.state;\n    const { classes } = this.props;\n\n    return (\n      <Container maxWidth=\"lg\">\n        <Typography variant=\"h3\" component=\"h1\" className={classes.pageTitle}>\n          Github users list\n        </Typography>\n        <Grid container spacing={6}>\n\n        {errorMessage ? (\n          <p>f{errorMessage}</p>\n         ) : isEmpty ? (\n           <p>No Data</p>\n         ) : isLoading ? (\n           <p>...</p>\n         ) : (\n\n           users.map((user, id) => (\n             <User\n              key={uuid()} \n              id={user.id}\n              login={user.login}\n              avatar={user.avatar_url}\n              githubUrl={user.html_url}\n             />           \n           ))\n         )\n\n        }\n        </Grid>\n\n      </Container>\n    );\n  }\n}\n\nUsersList.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(UsersList);\n","export const styles = theme => ({\n  pageTitle: {\n    margin: '40px 0',\n    textAlign: 'center'\n  }\n})\n  \n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport UsersList from './UsersList/UsersList';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<UsersList />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}